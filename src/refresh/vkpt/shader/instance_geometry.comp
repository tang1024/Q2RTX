/*
Copyright (C) 2018 Christoph Schied
Copyright (C) 2019, NVIDIA CORPORATION. All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

// ========================================================================== //
// This shader takes the entity models for the current frame and applies
// transforms to their original frames, producing triangles for these models
// in their final world positions. Also applies texture animations.
// ========================================================================== //

#version 460
#extension GL_GOOGLE_include_directive    : enable

#include "utils.glsl"

#define GLOBAL_UBO_DESC_SET_IDX 0
#include "global_ubo.h"

#include "global_textures.h"

#define VERTEX_BUFFER_DESC_SET_IDX 1
#include "vertex_buffer.h"

#include "read_visbuf.glsl"

#define LOCAL_SIZE_X 512

layout(local_size_x = LOCAL_SIZE_X, local_size_y = 1, local_size_z = 1) in;

void
main()
{
	uint instance_id = gl_WorkGroupID.x;

	int model_index = instance_buffer.model_indices[instance_id];

	bool is_world = (model_index & 0x80000000) != 0;
	uint buf_offset, num_triangles;
	
	if(is_world)
	{
		instance_id = ~model_index;
		buf_offset = instance_buffer.bsp_instance_buf_offset[instance_id];
		num_triangles = instance_buffer.bsp_instance_buf_size[instance_id];
	}
	else
	{
		instance_id = model_index;
		buf_offset = instance_buffer.model_instance_buf_offset[instance_id];
		num_triangles = instance_buffer.model_instance_buf_size[instance_id];
	}

	for(uint idx = gl_LocalInvocationID.x; idx < num_triangles; idx += LOCAL_SIZE_X)
	{
		Triangle t_i;
		mat4 M_curr = mat4(1.0);
		mat4 M_prev = mat4(1.0);

		if(is_world) {
			uint id = instance_id;
			Triangle t = get_bsp_triangle(idx + instance_buffer.bsp_prim_offset[id]);
			M_curr = instance_buffer.bsp_mesh_instances[id].M;
			uint id_prev = instance_buffer.world_current_to_prev[id];
			M_prev = instance_buffer.bsp_mesh_instances_prev[id_prev].M;

			t_i.positions      = t.positions;
			t_i.positions_prev = t.positions; /* no vertex anim for bsp meshes */
			t_i.tangent        = t.tangent;
			t_i.normals        = t.normals;
			t_i.tex_coords     = t.tex_coords;
			t_i.texel_density  = t.texel_density;
			t_i.cluster = instance_buffer.bsp_cluster_id[id];

			int frame = instance_buffer.bsp_mesh_instances[id].frame.x;
			if(frame > 0)
			{
				uint material = t.material_id;
				MaterialInfo minfo = get_material_info(material);
				frame = frame % int(minfo.num_frames);

				while(true) {
					material = minfo.next_frame;
					frame -= 1;
					if(frame > 0)
						minfo = get_material_info(material);
					else
						break;
				}

				t_i.material_id = material | (t.material_id & ~MATERIAL_INDEX_MASK); // preserve flags
			}
			else
			{
				t_i.material_id    = t.material_id;
			}
		}
		else { /* model */
			/* idx_offset should stay the same across frames */
			uint idx_offset = instance_buffer.model_idx_offset[instance_id];

			{
				/* read and interpolate triangles for model for _current_ frame */
				ModelInstance mi_curr = instance_buffer.model_instances[instance_id];
				uint vertex_off_curr = mi_curr.mat_offset_backlerp.y;
				uint vertex_off_prev = mi_curr.mat_offset_backlerp.z; // referes to animation frame
				Triangle t = get_model_triangle(idx, idx_offset, vertex_off_curr);
				Triangle t_prev = get_model_triangle(idx, idx_offset, vertex_off_prev);
				M_curr = mi_curr.M;

				float backlerp = uintBitsToFloat(mi_curr.mat_offset_backlerp.w);

				t_i.positions[0] = mix(t.positions[0], t_prev.positions[0], backlerp);
				t_i.positions[1] = mix(t.positions[1], t_prev.positions[1], backlerp);
				t_i.positions[2] = mix(t.positions[2], t_prev.positions[2], backlerp);

				t_i.normals[0] = mix(t.normals[0], t_prev.normals[0], backlerp);
				t_i.normals[1] = mix(t.normals[1], t_prev.normals[1], backlerp);
				t_i.normals[2] = mix(t.normals[2], t_prev.normals[2], backlerp);

				t_i.tangent = mix(t.tangent, t_prev.tangent, backlerp);

				t_i.alpha = mi_curr.alpha.x;
				t_i.texel_density  = t.texel_density;

				t_i.tex_coords  = t.tex_coords;

				t_i.material_id = t.material_id | mi_curr.mat_offset_backlerp.x;
				t_i.cluster = instance_buffer.model_cluster_id[instance_id];
			}
			{
				uint id_prev = instance_buffer.model_current_to_prev[instance_id];

				if(id_prev != ~0u)
				{
					ModelInstance mi_prev = instance_buffer.model_instances_prev[id_prev];
					/* read and interpolate triangles for model for _previous_ frame */
					uint vertex_off_curr = mi_prev.mat_offset_backlerp.y;
					uint vertex_off_prev = mi_prev.mat_offset_backlerp.z; // referes to animation frame
					Triangle t = get_model_triangle(idx, idx_offset, vertex_off_curr);
					Triangle t_prev = get_model_triangle(idx, idx_offset, vertex_off_prev);
					M_prev = mi_prev.M;

					float backlerp = uintBitsToFloat(mi_prev.mat_offset_backlerp.w);

					t_i.positions_prev[0] = mix(t.positions[0], t_prev.positions[0], backlerp);
					t_i.positions_prev[1] = mix(t.positions[1], t_prev.positions[1], backlerp);
					t_i.positions_prev[2] = mix(t.positions[2], t_prev.positions[2], backlerp);
				}
				else
				{
					t_i.positions_prev[0] = t_i.positions[0];
					t_i.positions_prev[1] = t_i.positions[1];
					t_i.positions_prev[2] = t_i.positions[2];
				}
			}
		}

		t_i.positions[0] = vec3(M_curr * vec4(t_i.positions[0], 1.0));
		t_i.positions[1] = vec3(M_curr * vec4(t_i.positions[1], 1.0));
		t_i.positions[2] = vec3(M_curr * vec4(t_i.positions[2], 1.0));

		t_i.positions_prev[0] = vec3(M_prev * vec4(t_i.positions_prev[0], 1.0));
		t_i.positions_prev[1] = vec3(M_prev * vec4(t_i.positions_prev[1], 1.0));
		t_i.positions_prev[2] = vec3(M_prev * vec4(t_i.positions_prev[2], 1.0));

		t_i.normals[0] = vec3(M_curr * vec4(t_i.normals[0], 0.0));
		t_i.normals[1] = vec3(M_curr * vec4(t_i.normals[1], 0.0));
		t_i.normals[2] = vec3(M_curr * vec4(t_i.normals[2], 0.0));

		t_i.tangent = vec3(M_curr * vec4(t_i.tangent, 0.0));

		uint instance_triangle_id = pack_instance_id_triangle_idx(instance_id | (is_world ? VISBUF_WORLD_INSTANCE_FLAG : 0), idx);
		store_instanced_triangle(t_i, instance_triangle_id, idx + buf_offset);
	}
}

