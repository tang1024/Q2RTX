/*
Copyright (C) 2019, NVIDIA CORPORATION. All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

// ========================================================================== //
// This shader applies a bilateral spatial filter to the volumetric lighting 
// effects computed previously by the `god_rays.comp` shader and interpolates
// those half-resolution effects to full screen resolution. 
// In the end, it also blends the effects on top of the color buffer.
// ========================================================================== //

#version 460
#extension GL_EXT_samplerless_texture_functions : enable
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#define GOD_RAYS_DESC_SET_IDX 0
#include "god_rays_shared.h"

#define GLOBAL_UBO_DESC_SET_IDX 2
#include "global_ubo.h"

#define GLOBAL_TEXTURES_DESC_SET_IDX 3
#include "global_textures.h"

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main()
{
	if (any(greaterThanEqual(gl_GlobalInvocationID.xy, ivec2(global_ubo.current_gpu_slice_width, global_ubo.height))))
		return;

	ivec2 i_position = ivec2(gl_GlobalInvocationID.xy);
	vec4 result = vec4(0.0);
	vec4 fallbackResult = vec4(0.0);
	float weightSum = 0;
	float referenceViewDepth = texelFetch(TEX_PT_VIEW_DEPTH_A, i_position.xy, 0).r;
	ivec2 lowResOrigin = ivec2(i_position.xy) >> 1;

	int field_left = 0;
	int field_right = global_ubo.width / 2;
	if(i_position.x >= field_right)
	{
		field_left = field_right;
		field_right = global_ubo.width;
	}

	for (int dy = -2; dy <= 2; dy++)
	{
		for (int dx = -2; dx <= 2; dx++)
		{
			ivec2 lowResPos = lowResOrigin + ivec2(dx, dy);
			ivec2 highResPos = lowResPos * 2 + GetRotatedGridOffset(lowResPos);

			if (highResPos.x < field_left || highResPos.x >= field_right || highResPos.y >= global_ubo.height)
				continue;

			vec4 color = texelFetch(TEX_GODRAYS_INTERMEDIATE, lowResPos, 0);
			float viewDepth = texelFetch(TEX_PT_VIEW_DEPTH_A, highResPos, 0).r;

			float weight = clamp(1 - 10 * abs(viewDepth - referenceViewDepth) / abs(referenceViewDepth), 0, 1);
			weight *= clamp(5 - length(vec2(highResPos - i_position)), 0, 1);

			result.rgba += color.rgba * weight;
			fallbackResult.rgba += color.rgba;
			weightSum += weight;
		}
	}

	if (weightSum > 0)
	{
		// We found some relevant low-res pixels
		result.rgba = result.rgba / weightSum;
	}
	else
	{
		// No relevant low-res pixels found - use non-bilateral spatial blur
		result.rgba = fallbackResult.rgba / 16.0;
	}

	vec4 originalColor = imageLoad(IMG_PT_TRANSPARENT, ivec2(gl_GlobalInvocationID.xy));

	// Additive blending - the correct way would be to use alpha blending,
	// but we don't really want to darken the entire map where there is no sun.
	// Darkening would happen because our volumetric lighting effect does not
	// consider any light sources but the sun, nor it considers indirect 
	// illumination, but the extinction (out-scatter) of light along the view ray 
	// is still calculated.
	vec3 composition = originalColor.rgb + result.rgb;
	
	imageStore(IMG_PT_TRANSPARENT, ivec2(gl_GlobalInvocationID.xy), vec4(composition.rgb, originalColor.a));
}
