/*
Copyright (C) 2019, NVIDIA CORPORATION. All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

#version 460
#extension GL_GOOGLE_include_directive : enable

#include "path_tracer.h"
#include "utils.glsl"

#define GLOBAL_TEXTURES_DESC_SET_IDX 2
#include "global_textures.h"

#define VERTEX_BUFFER_DESC_SET_IDX 3
#define VERTEX_READONLY 1
#include "vertex_buffer.h"

rayPayloadInNV RayPayload ray_payload;
hitAttributeNV vec2 hit_attribs;

void main()
{
	const uint primitive_id = gl_PrimitiveID + gl_InstanceCustomIndexNV & AS_INSTANCE_MASK_OFFSET;
	const Triangle triangle = get_instanced_triangle(primitive_id);

	const vec3 barycentric = vec3(1.0 - hit_attribs.x - hit_attribs.y, hit_attribs.x, hit_attribs.y);
	const vec2 tex_coord = triangle.tex_coords * barycentric;

	MaterialInfo minfo = get_material_info(triangle.material_id);
	vec4 emission = global_textureLod(minfo.diffuse_texture, tex_coord, 0);

	if((triangle.material_id & MATERIAL_KIND_MASK) == MATERIAL_KIND_EXPLOSION)
	{
		const vec3 normal = triangle.normals * barycentric;
		emission.rgb = mix(emission.rgb, get_explosion_color(normal, gl_WorldRayDirectionNV.xyz), triangle.alpha);
		emission.rgb *= global_ubo.pt_explosion_brightness;
	}

	emission.a *= triangle.alpha;
	emission.rgb *= emission.a;

	emission.rgb *= global_ubo.prev_adapted_luminance * 500;

	if(ray_payload.max_transparent_distance < gl_HitTNV)
	{
		ray_payload.transparency = packHalf4x16(alpha_blend_premultiplied(unpackHalf4x16(ray_payload.transparency), emission));
		ray_payload.max_transparent_distance = gl_HitTNV;
	}
	else
		ray_payload.transparency = packHalf4x16(alpha_blend_premultiplied(emission, unpackHalf4x16(ray_payload.transparency)));


	ignoreIntersectionNV();
}
